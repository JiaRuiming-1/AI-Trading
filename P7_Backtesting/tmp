import numpy as np
import pandas as pd
from tqdm import tqdm

import scipy
from scipy.optimize import fmin_l_bfgs_b
from sklearn.decomposition import PCA

from statistics import median
from scipy.stats import gaussian_kde
from statsmodels.formula.api import ols

from matplotlib import pyplot as plt
%matplotlib inline
plt.rcParams['figure.figsize'] = [8, 4]

import warnings
warnings.filterwarnings('ignore')

#fundamental_df = pd.read_csv('tmp_factor.csv').iloc[:,1:]
universe = pd.read_csv('tmp_factor.csv').iloc[:,1:]
universe['date'] = pd.to_datetime(universe['trade_date'],format='%Y%m%d')
universe = universe.set_index(['date']).sort_values(by=['date'])
print(universe.shape)
universe.head()

## shif return 5 times
universe['returns_5'] = universe.groupby('ts_code')['log-ret'].shift(-5).fillna(method='ffill')
universe = universe.sort_values(by=['date'])
all_factors = universe.copy(deep=True)
all_factors = all_factors.replace([np.inf, -np.inf], np.nan)
all_factors = all_factors.fillna(0)
print(universe.shape, all_factors.shape)

def wins(x,a,b):
    return np.where(x <= a,a, np.where(x >= b, b, x))

def density_plot(data):
    # data is series
    density = gaussian_kde(data)
    xs = np.linspace(np.min(data),np.max(data),200)
    density.covariance_factor = lambda : .2
    density._compute_covariance()
    plt.plot(xs,density(xs))
    plt.xlabel('times Returns')
    plt.ylabel('Density')
    plt.show()

def get_formula(factors, Y):
    L = ["0"]
    L.extend(factors)
    return Y + " ~ " + " + ".join(L)

def factors_from_names(n, name):
    return list(filter(lambda x: name in x, n))

def estimate_factor_returns(df, name='alpha_'):
    ## winsorize returns for fitting
    estu = df.copy(deep=True)
    estu['returns_5'] = wins(estu['returns_5'], -0.2, 0.19)
    all_factors = factors_from_names(list(df), name)
    form = get_formula(all_factors, "returns_5")
    model = ols(form, data=estu)
    results = model.fit()
    return results

estimate_factor_returns(all_factors.loc[all_factors['trade_date']==20220505]).params

from scipy.stats import zscore
alpha_factors = ['alpha_close2open_5_sma', 'alpha_close2open_25_sma', 'alpha_supertrend',
                 'alpha_cci', 'alpha_kama', 'alpha_skew2sentiment', 'alpha_fundamental', 'alpha_AI']
date_and_code = [ 'trade_date','ts_code']
calendar = all_factors.trade_date.unique() # int64
alpha_df_f = all_factors[alpha_factors+date_and_code]
alpha_df_f['returns_5'] = universe['returns_5']
facret = {}
for dt in tqdm(calendar, desc='regression factor returns'):
    facret[dt] = estimate_factor_returns(alpha_df_f.loc[alpha_df_f['trade_date']==dt]).params
facret[20220505]


date_list = all_factors.index.unique()
facret_df = pd.DataFrame(index = date_list)

alpha_factors = ['alpha_close2open_5_sma', 'alpha_close2open_25_sma', 'alpha_supertrend', 
                 'alpha_cci', 'alpha_kama', 'alpha_skew2sentiment', 'alpha_fundamental','alpha_AI']

for ii, dt in zip(calendar,date_list): 
    for alp in alpha_factors: 
        facret_df.at[dt, alp] = facret[ii][alp]

for column in facret_df.columns:
    plt.plot(facret_df[column].cumsum(), label=column)
plt.legend(loc='upper left')
plt.xlabel('Date')
plt.ylabel('Cumulative Factor Returns')
plt.show()
